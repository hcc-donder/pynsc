#!/usr/bin/env python
import codecs
import os
import sys
from shutil import rmtree

from setuptools import find_packages, setup, Command

here = os.path.abspath(os.path.dirname(__file__))

with codecs.open(os.path.join(here, "README.md"), encoding="utf-8") as f:
    long_description = "\n" + f.read()

about = {}

with open(os.path.join(here, "studentclearinghouse", "__version__.py")) as f:
    exec(f.read(), about)

if sys.argv[-1] == "publish":
    os.system("python setup.py sdist bdist_wheel upload")
    sys.exit()

required = [
    "pip>=18.0",
    "setuptools>=42"
]
extras = {
    "dev": [
#        "towncrier",
        "twine",
#        "sphinx<2",
        "flake8>=3.3.0,<4.0",
        "black;python_version>='3.6'",
        "virtualenv-clone>=0.2.5",
        "virtualenv"
    ],
#    "tests": ["pytest<5.0", "pytest-timeout", "pytest-xdist<2.0", "flaky", "mock"],
}


# # https://pypi.python.org/pypi/stdeb/0.8.5#quickstart-2-just-tell-me-the-fastest-way-to-make-a-deb
# class DebCommand(Command):
#     """Support for setup.py deb"""

#     description = "Build and publish the .deb package."
#     user_options = []

#     @staticmethod
#     def status(s):
#         """Prints things in bold."""
#         print(f"\033[1m{s}\033[0m")

#     def initialize_options(self):
#         pass

#     def finalize_options(self):
#         pass

#     def run(self):
#         try:
#             self.status("Removing previous builds...")
#             rmtree(os.path.join(here, "deb_dist"))
#         except FileNotFoundError:
#             pass
#         self.status("Creating debian mainfest...")
#         os.system(
#             "python setup.py --command-packages=stdeb.command sdist_dsc -z artful --package3=studentclearinghouse --depends3=python3-virtualenv-clone"
#         )
#         self.status("Building .deb...")
#         os.chdir("deb_dist/studentclearinghouse-{}".format(about["__version__"]))
#         os.system("dpkg-buildpackage -rfakeroot -uc -us")


class UploadCommand(Command):
    """Support setup.py upload."""

    description = "Build and publish the package."
    user_options = []

    @staticmethod
    def status(s):
        """Prints things in bold."""
        print(f"\033[1m{s}\033[0m")

    def initialize_options(self):
        pass

    def finalize_options(self):
        pass

    def run(self):
        try:
            self.status("Removing previous builds...")
            rmtree(os.path.join(here, "dist"))
        except FileNotFoundError:
            pass
        self.status("Building Source distribution...")
        os.system(f"{sys.executable} setup.py sdist bdist_wheel")
        self.status("Uploading the package to PyPI via Twine...")
        os.system("twine upload dist/*")
        self.status("Pushing git tags...")
        os.system("git tag v{}".format(about["__version__"]))
        os.system("git push --tags")
        sys.exit()


setup(
    name="studentclearinghouse",
    version=about["__version__"],
    description="A module for creating requests for and processing responses from the National Student Clearinghouse",
    long_description=long_description,
    long_description_content_type='text/markdown',
    author="David Onder",
    author_email="donder@haywood.edu",
    url="https://github.com/hcc-donder/studentclearinghouse",
    #packages=find_packages(exclude=["tests", "tests.*", "tasks", "tasks.*"]),
    packages=find_packages(where="studentclearinghouse"),
    python_requires=">=3.6",
    zip_safe=True,
    setup_requires=[],
    install_requires=required,
    extras_require=extras,
    include_package_data=True,
    license="MIT",
    classifiers=[
        "Programming Language :: Python :: 3",
        "Development Status :: 3 - Alpha",
        "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
        "Operating System :: OS Independent",
    ],
    cmdclass={"upload": UploadCommand},
)